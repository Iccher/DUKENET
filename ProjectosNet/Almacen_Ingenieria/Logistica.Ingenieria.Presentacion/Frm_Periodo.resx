<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAICAQAAAAAADoAgAAJgAAACAgAAAAAAAAqAgAAA4DAAAoAAAAIAAAAEAAAAABAAQAAAAAAIAC
        AAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAgAAAgAAAAICAAIAAAACAAIAAgIAAAMDAwACAgIAAAAD/AAD/
        AAAA//8A/wAAAP8A/wD//wAA////AAAAAAAAAAAAB3AAAAAAAAAAAAAAAAAAAHAIiIiAAAAAAAAAAAAA
        AAcHt7e3uIAAAAAAAAAAAABwe3t7e3uIAAB3d3d3d3d3B7e3t4iIiIAAAAAAAAAAAHt7e3gAAAAAAAiI
        iIiIiIC3t7cHAAAAAAAIe3t7e3dwe3t7BwAAAAAAh7e3t7d3gLe3twcAAAAAAHt7e3t3eAt7e3sHAAAA
        AAC3t7e3d3gHt7e3BwAAAAAAe3iIiIiIe3t7ewcAAAAAAIe3t7e3t7e3t7eAcAAAAACIiIiIiIiIe3t7
        eAd3cACAAAAAAAAAAIe3t7eAAAiHgAAAAAAAAAAIe3t7eIiIuAAAAAAAAAAAAIe3t7e3t4AAAAAAAAAA
        AAAIi3t7e4gAAAABEREREQAAAAiIiIgAAAAAmZmZmZkAAAAAAAAAAAAACZmZmZmZAAAAAAAAAAAAAJmZ
        mZmZmQAAAAAAAAAAAACZmZmZmZkXAAAAAAAAAAAAmYB5mZmZF4iIiIiIiIiIgJAACZmZmReHd3d3d3d3
        d3iRAAmZmZkXh3d3d3d3d3cAmRAZmZmZF3//////////d5mZmZmZmR+IiIiIiIiIiIiZmZmZmZkXAAAA
        AAAAAAAAeZmZmZmZEAAAAAAAAAAAAAeZmZmZmRAAAAAAAAAAAAAAeXl5eXkQAAAAAAAAAAAA//+Af///
        AB///gAH//wABwAAAAcAAAP/AAAD/wAAA/8AAAP/AAAD/wAAA/8AAAP/AAAB/wAAAAH//AAB//4AA///
        AAfgD4APwAfgP4AH//8AB///AAP/wAAAAAAQAAAAOAAAADgAAAAAAAAAAAAAAAAB//8AA///gAP//8AH
        //8oAAAAIAAAAEAAAAABAAgAAAAAAIAEAAAAAAAAAAAAAAABAAAAAAAA////APD6/wDw9/8A8PDwAO/n
        4ADg4OAA3/D/ANDo/wDP5/8AwOf/AN/Y3wDf2NAA39ffAN/X0ADQ0NAAz8fPAMDHzwDAv8AAsOD/AL/f
        /wC/3/AAr9/wAKDY8ACg0P8An+f/AJDg/wCf0P8An9fwAJDY8ACfz/8AkMv/AI/Y/wCP3PAAj9DwAI/Q
        7wCA0O8Aj8j/AI/H/wCAyP8AgMD/AIDA8ACPyO8AgM/vAL+4vwC/t78AsLCwALCvsACgn6AAn5iQAJCX
        nwCQkJAAkJCPAJCPkACPj48Aj4eAAICEjwCAgIAAgIB/AIB/gAB/x/8AcMD/AH/J7wBwx+8AcMTgAG/A
        7wBvwOAAf7/wAHC48ABwuO8Ab7//AG+/8ABgv/AAb73gAG+17wBguOAAYLDvAGCw4ABgr+AAX7jwAFC3
        8ABfv+8AX7fgAFCw7wBQt+AAX6zgAFCq4ABPte8AT7fgAECw7wBfsd8AUKzfAE+o3wBPpd8AT6fQAECv
        3wBAod8AQKDQAECf0ABAh68AP6/vADCs4AAvqOAAIKXgAC+o3wAvp98AIKffAD+f3wA/n9AAP5jPAD+Q
        wAAfoOAAAKXgAB+g3wAQoN8AH5/fAACb3wAAm9AAAJffAACX0AAAj88AAIe/AG9voAB/eoAAQHeQAEBo
        gABQUJAAX1iPAD9AkAAAf7AAAHivAAB3oAAQZ5AAAG+fABBfgAAAX4AAIDDvACAv8AAgL+8AIC/gAB8v
        8AAfLu8AHyjgABAn4AAQIN8AECDQAB8owAAvMJAAICifAB8nsAAfJ6AAf3h/AH93fwBwd38AcHBwAHBv
        bwBvbm8Ab2hgAGBgYABfWF8AX1hQAEBHTwBAQEAAP1dvAB9IYAAQT28AMD9PAB84TwAAME8AEBhPAC8v
        PwAvLDAAICAvAB8fIAAQFx8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AK6urq6urq6urq6urq6u
        rq6urq739/f39/eurq6urq6urq6urq6urq6urq6urq6urq7396SkpKSkpPf3rq6urq6urq6urq6urq6u
        rq6urq6u909YZGZzc3NzpKT3966urq6urq6urq6urq6urq6urvc8R09YZHNzc3NzdKSk966urq6urq6u
        rq6urq6urq73FyZAT09YZnN1ZBYYrq6urq739/f39/f39/f39/f3908XHjxHT1hmR66urq6urq6urmBg
        WlpMSkg/PSMgGKZ0KB4XHiZAR0eurq6urq6urq6uX2BcWlpKSD8+PSMZhnRDKB4XJiZArq6urq6urq6u
        rq5fYGBcWkxKSD89IyCAbktDJBceJveurq6urq6urq6url9gYF9aTEpISD49IIBuVEkoHhdz966urq6u
        rq6urq6uXFxgYFxaTEpIPj0fhHRgWkkoHnP3rq6urq6urq6urq5PWlxgbWJ7fKKlqqqjdF1gVEkoc/eu
        rq6urq6urq6urqekhYOCeHd2c29vb3NzWmBcSkMopPeurq6urq6urq6uo6Ojo6Ojo6Ojo6Ojo6NlWmBa
        S0MmpPeurq6u9/dxo66urq6urq6urq6urq6urqNeWmBaSkMkpPf39/dPWGZmrq6urq6urq6urq6urq6u
        rqNMYF9aSygeFx4mQEdPZq6urq6urq6urq6urq6urq6urqNaYF9aQygeFx48QE+urq6urq6urq6urq6u
        rq6urq6urqOjYFxKQygeF4CArq6urq6uqI6Hh5KSkpKSkq6urq6urq6jo4CAgICArq6urq6urqiHioqK
        ioqKioqSoa6urq6urq6urq6urq6urq6urq6oioqKioqKioqKipKZrq6urq6urq6urq6urq6urq6urn+K
        ioqKioqKioqKkpw6rq6urq6urq6urq6u9/f39/f3joqHjoeKioqKioqSnC039/f39/f39/f39/ednZ2d
        oKuOh346C4qKioqKipKcLTIyMjIyMjIyMjIyMjIyMjKerI6oBK6uioqKioqKkpkrMhErKysrKysrKysr
        KysrKy/3jqgDrq6OioqKioqSmQ8xCg4ODg4ODg4ODg4ODg4OmK2OiqioqIqKioqKipI6Di8AAgICAgIC
        AgICAgICAgIKLZCKioeKioqKioqKkjgFoKCgoKCgoKCgoKCgoKCgoDiWkoqKioqKioqKioqSOBCgrq6u
        rq6urq6urq6urq6urq55ioqKioqKioqKipI2oK6urq6urq6urq6urq6urq6urq55h4qKioqKioqKkqCu
        rq6urq6urq6urq6urq6urq6urq55k46Hh4eHh4eSrq6urq6urq6urq6urq6urq6urq7//+B///+AH///
        AAf//gAD//wAHwAAAf8AAAP/AAAH/wAAB/8AAAf/AAAH/wAAB/8AAAP/AAAB4f/8AAH//gAD//8AB+AP
        gA/AD+A/gAf//wAH//8AA//AAAAAAAAAAAAYAAAAGAAAAAAAAAAAAAAAAAH//wAD//+AB///wA///w==
</value>
  </data>
</root>